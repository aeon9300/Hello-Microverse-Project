"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const normalize_string_1 = require("@hint/utils/dist/src/misc/normalize-string");
const is_local_file_1 = require("@hint/utils/dist/src/network/is-local-file");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
class HighestAvailableDocumentModeHint {
    constructor(context) {
        let requireMetaElement = false;
        let suggestRemoval = false;
        const checkHeader = (resource, responseHeaders) => {
            const originalHeaderValue = responseHeaders['x-ua-compatible'];
            const headerValue = normalize_string_1.normalizeString(originalHeaderValue);
            if (headerValue === null) {
                if (!requireMetaElement && !suggestRemoval) {
                    context.report(resource, i18n_import_1.getMessage('responseShouldInclude', context.language));
                }
                return;
            }
            const codeSnippet = `Content-Type: ${originalHeaderValue}`;
            const codeLanguage = 'http';
            if (suggestRemoval) {
                context.report(resource, i18n_import_1.getMessage('responseUnneeded', context.language), { codeLanguage, codeSnippet });
                return;
            }
            if (headerValue !== 'ie=edge') {
                context.report(resource, i18n_import_1.getMessage('headerValueShouldBe', context.language, !originalHeaderValue ? '' : originalHeaderValue), { codeLanguage, codeSnippet });
            }
        };
        const checkMetaElement = (resource) => {
            const pageDOM = context.pageDOM;
            const XUACompatibleMetaElements = pageDOM.querySelectorAll('meta[http-equiv=x-ua-compatible i]');
            if (!requireMetaElement || suggestRemoval) {
                if (XUACompatibleMetaElements.length !== 0) {
                    const errorMessage = suggestRemoval ?
                        i18n_import_1.getMessage('metaElementShouldNotBeSpecified', context.language) :
                        i18n_import_1.getMessage('metaElementShouldNotBeSpecifiedUseHeader', context.language);
                    for (const metaElement of XUACompatibleMetaElements) {
                        context.report(resource, errorMessage, { element: metaElement });
                    }
                }
                return;
            }
            if (XUACompatibleMetaElements.length === 0) {
                context.report(resource, i18n_import_1.getMessage('metaElementShouldBeSpecified', context.language));
                return;
            }
            const XUACompatibleMetaElement = XUACompatibleMetaElements[0];
            const contentValue = XUACompatibleMetaElement.getAttribute('content');
            if (normalize_string_1.normalizeString(contentValue) !== 'ie=edge') {
                const message = i18n_import_1.getMessage('metaElementValueShouldBe', context.language, !contentValue ? '' : contentValue);
                context.report(resource, message, { element: XUACompatibleMetaElement });
            }
            const headElements = pageDOM.querySelectorAll('head *');
            let metaElementIsBeforeRequiredElements = true;
            for (const headElement of headElements) {
                if (headElement.isSame(XUACompatibleMetaElement)) {
                    if (!metaElementIsBeforeRequiredElements) {
                        const message = i18n_import_1.getMessage('metaElementWrongPosition', context.language);
                        context.report(resource, message, { element: XUACompatibleMetaElement });
                    }
                    break;
                }
                if (!['title', 'meta'].includes(headElement.nodeName.toLowerCase())) {
                    metaElementIsBeforeRequiredElements = false;
                }
            }
            const bodyMetaElements = pageDOM.querySelectorAll('body meta[http-equiv=x-ua-compatible i]');
            if ((bodyMetaElements.length > 0) && bodyMetaElements[0].isSame(XUACompatibleMetaElement)) {
                const message = i18n_import_1.getMessage('metaElementNotBody', context.language);
                context.report(resource, message, { element: XUACompatibleMetaElement });
                return;
            }
            if (XUACompatibleMetaElements.length > 1) {
                const metaElements = XUACompatibleMetaElements.slice(1);
                for (const metaElement of metaElements) {
                    const message = i18n_import_1.getMessage('metaElementDuplicated', context.language);
                    context.report(resource, message, { element: metaElement });
                }
            }
        };
        const loadHintConfigs = () => {
            requireMetaElement = (context.hintOptions && context.hintOptions.requireMetaElement) || false;
            suggestRemoval = [
                'ie 8',
                'ie 9',
                'ie 10'
            ].every((e) => {
                return !context.targetedBrowsers.includes(e);
            });
        };
        const validate = ({ resource }) => {
            if (!is_local_file_1.isLocalFile(resource) && context.pageHeaders) {
                checkHeader(resource, context.pageHeaders);
            }
            checkMetaElement(resource);
        };
        loadHintConfigs();
        context.on('traverse::end', validate);
    }
}
exports.default = HighestAvailableDocumentModeHint;
HighestAvailableDocumentModeHint.meta = meta_1.default;
