"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const normalize_string_1 = require("@hint/utils/dist/src/misc/normalize-string");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
class MetaCharsetUTF8Hint {
    constructor(context) {
        let validated = false;
        context.on('scan::end', () => {
            validated = false;
        });
        context.on('parse::end::html', ({ document, html, resource }) => {
            if (validated) {
                return;
            }
            validated = true;
            if (document.isFragment) {
                return;
            }
            const charsetMetaElements = document.querySelectorAll('meta[charset], meta[http-equiv="content-type" i]');
            if (charsetMetaElements.length === 0) {
                context.report(resource, i18n_import_1.getMessage('metaElementNotSpecified', context.language));
                return;
            }
            const charsetMetaElement = charsetMetaElements[0];
            if (charsetMetaElement.getAttribute('http-equiv') !== null) {
                context.report(resource, i18n_import_1.getMessage('metaElementShorter', context.language), { element: charsetMetaElement });
            }
            else if (normalize_string_1.normalizeString(charsetMetaElement.getAttribute('charset')) !== 'utf-8') {
                context.report(resource, i18n_import_1.getMessage('metaElementWrongValue', context.language, charsetMetaElement.getAttribute('charset')), { element: charsetMetaElement });
            }
            const firstHeadElement = document.querySelectorAll('head :first-child')[0];
            const isCharsetMetaFirstHeadElement = charsetMetaElement && firstHeadElement && charsetMetaElement.isSame(firstHeadElement);
            const headElementContent = document.querySelectorAll('head')[0].outerHTML;
            const isMetaElementFirstHeadContent = (/^<head[^>]*>\s*<meta/).test(headElementContent);
            if (!isCharsetMetaFirstHeadElement || !isMetaElementFirstHeadContent) {
                context.report(resource, i18n_import_1.getMessage('metaElementFirstThing', context.language), { element: charsetMetaElement });
            }
            const bodyMetaElements = document.querySelectorAll('body meta[charset], body meta[http-equiv="content-type" i]');
            if (bodyMetaElements[0] && bodyMetaElements[0].isSame(charsetMetaElement)) {
                context.report(resource, i18n_import_1.getMessage('metaElementInBody', context.language), { element: charsetMetaElement });
                return;
            }
            if (charsetMetaElements.length > 1) {
                const metaElements = charsetMetaElements.slice(1);
                for (const metaElement of metaElements) {
                    context.report(resource, i18n_import_1.getMessage('metaElementDuplicated', context.language), { element: metaElement });
                }
            }
        });
    }
}
exports.default = MetaCharsetUTF8Hint;
MetaCharsetUTF8Hint.meta = meta_1.default;
