"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const forEach = require("lodash/forEach");
const groupBy = require("lodash/groupBy");
const table = require("text-table");
const logSymbols = require("log-symbols");
const stripAnsi = require('strip-ansi');
const utils_1 = require("@hint/utils");
const hint_1 = require("hint");
const _ = {
    forEach,
    groupBy
};
const { writeFileAsync } = utils_1.fs;
const debug = utils_1.debug(__filename);
class SummaryFormatter {
    async format(messages, options = {}) {
        debug('Formatting results');
        if (messages.length === 0) {
            return;
        }
        const buildMessage = (count, type) => {
            if (count === 0) {
                return '';
            }
            return `${count} ${type}${count === 1 ? '' : 's'}`;
        };
        const tableData = [];
        let totalErrors = 0;
        let totalWarnings = 0;
        const resources = _.groupBy(messages, 'hintId');
        const sortedResources = Object.entries(resources).sort(([hintA, problemsA], [hintB, problemsB]) => {
            if (problemsA.length < problemsB.length) {
                return -1;
            }
            if (problemsA.length > problemsB.length) {
                return 1;
            }
            return hintA.localeCompare(hintB);
        });
        _.forEach(sortedResources, ([hintId, problems]) => {
            const msgsBySeverity = _.groupBy(problems, 'severity');
            const errors = msgsBySeverity[hint_1.Severity.error] ? msgsBySeverity[hint_1.Severity.error].length : 0;
            const warnings = msgsBySeverity[hint_1.Severity.warning] ? msgsBySeverity[hint_1.Severity.warning].length : 0;
            const red = chalk_1.default.red;
            const yellow = chalk_1.default.yellow;
            const line = [chalk_1.default.cyan(hintId)];
            if (errors > 0) {
                line.push(red(buildMessage(errors, 'error')));
            }
            if (warnings > 0) {
                line.push(yellow(buildMessage(warnings, 'warning')));
            }
            tableData.push(line);
            totalErrors += errors;
            totalWarnings += warnings;
        });
        const color = totalErrors > 0 ? chalk_1.default.red : chalk_1.default.yellow;
        const result = `${table(tableData)}
${color.bold(`${logSymbols.error} Found a total of ${totalErrors} ${totalErrors === 1 ? 'error' : 'errors'} and ${totalWarnings} ${totalWarnings === 1 ? 'warning' : 'warnings'}`)}`;
        if (!options.output) {
            utils_1.logger.log(result);
            return;
        }
        await writeFileAsync(options.output, stripAnsi(result));
    }
}
exports.default = SummaryFormatter;
