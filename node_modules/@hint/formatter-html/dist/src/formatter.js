"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ejs = require("ejs");
const fs = require("fs-extra");
const utils_1 = require("@hint/utils");
const utils = require('./utils');
const result_1 = require("./result");
const i18n_import_1 = require("./i18n.import");
const { cwd } = utils_1.fs;
const debug = utils_1.debug(__filename);
const getCategoryListFromResources = (resources) => {
    const categoriesArray = resources.hints.map((hint) => {
        if (hint.meta.docs && hint.meta.docs.category) {
            return hint.meta.docs.category;
        }
        return utils_1.Category.other;
    });
    const categories = new Set(categoriesArray);
    return Array.from(categories);
};
const getCategoryList = (resources) => {
    if (resources) {
        return getCategoryListFromResources(resources);
    }
    const result = [];
    for (const [, value] of Object.entries(utils_1.Category)) {
        result.push(value);
    }
    return result;
};
const getLanguageFile = (language = 'en') => {
    const relativePath = path.join('js', 'scan', '_locales');
    const languagesToCheck = [language];
    const languageParts = language.split('-');
    if (languageParts.length > 1) {
        languagesToCheck.push(languageParts[0]);
    }
    let existingLanguage = 'en';
    for (const lang of languagesToCheck) {
        const file = path.join(__dirname, 'assets', relativePath, lang, 'messages.js');
        if (fs.existsSync(file)) {
            existingLanguage = lang;
            break;
        }
    }
    return path.join(relativePath, existingLanguage, 'messages.js');
};
class HTMLFormatter {
    renderFile(filename, data) {
        return new Promise((resolve, reject) => {
            ejs.renderFile(filename, data, { filename }, (err, html) => {
                if (err) {
                    return reject(err);
                }
                return resolve(html);
            });
        });
    }
    async format(problems, options = {}) {
        debug('Formatting results');
        const language = options.language;
        const target = options.target || '';
        const result = new result_1.default(target, options);
        const categoryList = getCategoryList(options.resources);
        categoryList.forEach((category) => {
            result.addCategory(category, language);
        });
        problems.forEach((message) => {
            result.addProblem(message, language);
        });
        if (options.resources) {
            options.resources.hints.forEach((hintConstructor) => {
                const categoryName = hintConstructor.meta.docs.category;
                const hintId = hintConstructor.meta.id;
                const category = result.getCategoryByName(categoryName);
                const hint = category.getHintByName(hintId);
                if (!hint) {
                    category.addHint(hintId, 'pass');
                }
            });
        }
        try {
            if (!options.noGenerateFiles) {
                result.percentage = 100;
                result.id = Date.now().toString();
                const htmlPath = path.join(__dirname, 'views', 'pages', 'report.ejs');
                const html = await this.renderFile(htmlPath, {
                    getMessage(key, substitutions) {
                        return i18n_import_1.getMessage(key, language, substitutions);
                    },
                    languageFile: getLanguageFile(language),
                    result,
                    utils
                });
                const name = target.replace(/:\/\//g, '-')
                    .replace(/:/g, '-')
                    .replace(/\./g, '-')
                    .replace(/\//g, '-')
                    .replace(/[?=]/g, '-query-')
                    .replace(/-$/, '');
                const destDir = options.output || path.join(cwd(), 'hint-report', name);
                const currentDir = path.join(__dirname);
                const configDir = path.join(destDir, 'config');
                await fs.remove(destDir);
                await fs.mkdirp(configDir);
                await fs.copy(path.join(currentDir, 'assets'), destDir);
                const parseCssfile = async (filePath, prefix = '../..') => {
                    const cssFile = filePath;
                    let scanCSS = await fs.readFile(cssFile, 'utf-8');
                    const urlCSSRegex = /url\(['"]?([^'")]*)['"]?\)/g;
                    scanCSS = scanCSS.replace(urlCSSRegex, (match, group) => {
                        return `url('${group[0] === '/' ? prefix : ''}${group}')`;
                    });
                    await fs.outputFile(filePath, scanCSS, { encoding: 'utf-8' });
                };
                await parseCssfile(path.join(destDir, 'styles', 'scan', 'scan-results.css'));
                await parseCssfile(path.join(destDir, 'styles', 'anchor-top.css'), '../');
                if (options.config) {
                    await fs.outputFile(path.join(configDir, result.id), JSON.stringify(options.config), { encoding: 'utf-8' });
                }
                const destination = path.join(destDir, 'index.html');
                await fs.outputFile(destination, html);
                utils_1.logger.log(i18n_import_1.getMessage('youCanView', language, destination));
            }
            return result;
        }
        catch (err) {
            utils_1.logger.error(err);
            throw err;
        }
    }
}
exports.default = HTMLFormatter;
