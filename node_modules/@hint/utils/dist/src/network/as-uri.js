"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const url_1 = require("url");
const fileUrl = require("file-url");
const compact = require("lodash/compact");
const debug_1 = require("../debug");
const logger = require("../logging");
const fs_1 = require("../fs");
const fs_2 = require("../fs");
const fs_3 = require("../fs");
const debug = debug_1.debug(__filename);
exports.getAsUri = (source) => {
    const entry = source.trim();
    let target;
    try {
        target = new url_1.URL(entry);
    }
    catch (err) {
        {
            target = null;
        }
    }
    const protocol = target ? target.protocol : null;
    if (protocol === 'http:' || protocol === 'https:' || protocol === 'file:') {
        debug(`Adding valid target: ${target && url.format(target)}`);
        return target;
    }
    if (fs_1.isFile(entry) || fs_2.isDirectory(entry)) {
        target = new url_1.URL(fileUrl(entry));
        debug(`Adding valid target: ${url.format(target)}`);
        return target;
    }
    target = new url_1.URL(`http://${entry}`);
    if (!fs_3.pathExists(entry) && (target.hostname === 'localhost' || target.hostname.includes('.'))) {
        debug(`Adding modified target: ${url.format(target)}`);
        return target;
    }
    logger.error(`Ignoring '${entry}' as it's not an existing file nor a valid URL`);
    return null;
};
exports.getAsUris = (source) => {
    const targets = source.reduce((uris, entry) => {
        const uri = exports.getAsUri(entry);
        if (uri) {
            uris.push(uri);
        }
        return uris;
    }, []);
    return compact(targets);
};
