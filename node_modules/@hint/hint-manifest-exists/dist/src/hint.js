"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@hint/utils");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const { normalizeString } = utils_1.misc;
class ManifestExistsHint {
    constructor(context) {
        let manifestIsSpecified = false;
        const checkIfManifestWasSpecified = (scanEndEvent) => {
            if (!manifestIsSpecified) {
                context.report(scanEndEvent.resource, i18n_import_1.getMessage('manifestNotSpecified', context.language));
            }
        };
        const checkIfManifest = (data) => {
            const { element, resource } = data;
            if (normalizeString(element.getAttribute('rel')) !== 'manifest') {
                return;
            }
            if (manifestIsSpecified) {
                context.report(resource, i18n_import_1.getMessage('manifestDuplicated', context.language), { element });
                return;
            }
            manifestIsSpecified = true;
            const href = normalizeString(element.getAttribute('href'));
            if (!href) {
                context.report(resource, i18n_import_1.getMessage('manifestNonEmptyHref', context.language), { element });
            }
        };
        const handleFetchEnd = ({ element, resource, response }) => {
            if (response.statusCode >= 400) {
                context.report(resource, i18n_import_1.getMessage('manifestNotFetchedStatus', context.language, `${response.statusCode}`), { element });
            }
        };
        const handleFetchErrors = (fetchErrorEvent) => {
            const { resource, element } = fetchErrorEvent;
            context.report(resource, i18n_import_1.getMessage('manifestNotFetched', context.language), { element });
        };
        context.on('element::link', checkIfManifest);
        context.on('fetch::end::manifest', handleFetchEnd);
        context.on('fetch::error::manifest', handleFetchErrors);
        context.on('scan::end', checkIfManifestWasSpecified);
    }
}
exports.default = ManifestExistsHint;
ManifestExistsHint.meta = meta_1.default;
