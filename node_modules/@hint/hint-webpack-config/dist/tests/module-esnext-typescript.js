"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const mock = require("mock-require");
const utils_1 = require("@hint/utils");
const utils_tests_helpers_1 = require("@hint/utils-tests-helpers");
const { getHintPath } = utils_1.test;
const { loadJSONFile } = utils_1.fs;
const webpackDestPath = path.join(__dirname, 'fixtures', 'valid', 'package.json');
const webpackV1DestPath = path.join(__dirname, 'fixtures', 'version1', 'package.json');
const webpackConfig = loadJSONFile(webpackDestPath);
const webpackV1Config = loadJSONFile(webpackV1DestPath);
const hintPath = getHintPath(__filename, true);
const tests = [
    {
        before() {
            const loadPackage = () => {
                return webpackConfig;
            };
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage });
        },
        name: 'If TS configuration is valid and webpack version >=2 should pass',
        path: path.join(__dirname, 'fixtures', 'tsvalid')
    },
    {
        before() {
            const loadPackage = () => {
                return webpackConfig;
            };
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage });
        },
        name: `If TS configuration is not valid, is should fail`,
        path: path.join(__dirname, 'fixtures', 'tsinvalid'),
        reports: [{ message: 'TypeScript `compilerOptions.module` option should be `esnext`' }]
    },
    {
        before() {
            const loadPackage = () => {
                return webpackV1Config;
            };
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage });
        },
        name: 'If TS configuration is invalid, but webpack version is < 2, it should pass',
        path: path.join(__dirname, 'fixtures', 'tsinvalid')
    }
];
const generateTest = (testName) => {
    return [
        {
            before() {
                const loadPackage = () => {
                    return webpackConfig;
                };
                mock('@hint/utils/dist/src/packages/load-package', { loadPackage });
            },
            name: testName,
            path: path.join(__dirname, 'fixtures', 'tsvalid')
        }
    ];
};
utils_tests_helpers_1.testLocalHint(hintPath, tests, {
    parsers: ['webpack-config', 'typescript-config'],
    serial: true
});
utils_tests_helpers_1.testLocalHint(hintPath, generateTest(`If 'webpack-config' parser is not in the configuration it should pass`), {
    parsers: [],
    serial: true
});
utils_tests_helpers_1.testLocalHint(hintPath, generateTest(`if 'typescript-config' parser is no in the configuration it should pass`), {
    parsers: ['webpack-config'],
    serial: true
});
